% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Plateau1.R
\name{Plateau5}
\alias{Plateau5}
\title{Plateau5}
\usage{
Plateau5(
  Dose,
  df.T,
  df.y,
  Ti = 200,
  Tf = 500,
  n.iter,
  inv = FALSE,
  n.burnin = n.iter/2,
  n.thin = max(1, floor(n.iter - n.burnin)/10)
)
}
\arguments{
\item{Dose}{\link{numeric} (\strong{required}) set of the irradiation doses}

\item{df.T}{\link{matrix} (\strong{required}) Luminescence data: the temperatures}

\item{df.y}{\link{matrix} (\strong{required}) Luminescence data; the luminescence signal}

\item{Ti}{\link{numeric} (\strong{with default}) temperature minimum for the plateau}

\item{Tf}{\link{numeric} (\strong{with default}) temperature maximum for the plateau}

\item{n.iter}{\link{numeric} (\strong{required}) the number of iteration}

\item{inv}{\link{logical} (\strong{with default}) TRUE to calculate the inverse estimator.
Default is FALSE: i.e. the direct estimator}

\item{n.burnin}{\link{numeric} (\strong{with default})    number of iterations to discard at the beginning (burn in).
Default is n.iter/2, that is, discarding the first half of the simulations.}

\item{n.thin}{\link{numeric} (\strong{with default}) thinning rate. Must be a positive integer. Set n.thin > 1 to save memory and computation time if n.iter is large.
Default is max(1, floor((n.iter-n.burnin) / 10)) which will only thin if there are at least 20 simulations.}
}
\value{
an (r Ã— 4)-matrix,
\tabular{lll}{
\strong{column} \tab \strong{Type} \tab \strong{Description}\cr
\code{alpha} \tab  \code{numeric} \tab intercept\cr
\code{beta} \tab \code{numeric} \tab slope \cr
\code{sigma2} \tab  \code{numeric} \tab variance\cr
\code{T} \tab \code{numeric} \tab Temperature range \cr
}
}
\description{
MC Analysis TL from linear regression using plateau samplerS
}
\examples{
##load data
if(dev.cur()!=1) dev.off()
data(multiTL, envir = environment())
Dose<-multiTL$Dose
df.T<-multiTL$df.T
df.y<-multiTL$df.y
n.iter<-multiTL$n.iter
test<-Plateau5(Dose,df.T,df.y,n.iter)
#
if(dev.cur()!=1) dev.off()
data(TLpan, envir = environment())
Dose<-c(0,0,80,80,80,160,160,160)
df.T<-matrix(rep(seq(26,500),8),475,8)
df.y<-TL.Pan[,1:8]
n.iter<-100
Pan<-Plateau5(Dose,df.T,df.y,n.iter,inv=TRUE)


}
